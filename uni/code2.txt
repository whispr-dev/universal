import numpy as np
import scipy.sparse as sp
import scipy.sparse.linalg as spla
import matplotlib.pyplot as plt

# Constants
D = 2.7268  # Fractal dimension of 4D Menger Sponge
N = 3        # Fractal recursion factor
c = 3e8      # Speed of light (m/s)
G = 6.674e-11 # Gravitational constant
hbar = 1.0545718e-34  # Reduced Planck's constant
m_e = 9.10938356e-31  # Electron mass (for wavefunction simulation)

# Grid settings
gridsize = 50  # Discretized spacetime grid
T_max = 100    # Maximum time steps
delta_x = 1e-3 # Spacing in space
delta_t = 1e-6 # Time step size

# Initialize metric tensor on grid
G_f = np.zeros((gridsize, gridsize, gridsize, gridsize))
G_f[0, :, :, :] = 1  # Initial condition

# Fractal corrections (Monte Carlo randomization at deeper recursion levels)
def fractal_correction(depth, size):
    return N**(-D * depth) * np.random.normal(0, 0.01, size)

# Initialize quantum wavefunction (Fractal Schr√∂dinger Equation)
Psi = np.exp(-np.linspace(-1, 1, gridsize)**2)  # Gaussian wave packet
Psi = Psi / np.linalg.norm(Psi)  # Normalize

# Kinetic term using finite difference method
Laplacian = -2 * np.eye(gridsize) + np.eye(gridsize, k=1) + np.eye(gridsize, k=-1)
Laplacian /= delta_x**2

# Hamiltonian with fractal corrections
H_f = - (hbar**2 / (2 * m_e)) * Laplacian + np.diag(fractal_correction(1, gridsize))

# Time evolution using Crank-Nicolson method
I = np.eye(gridsize)
A = I - 1j * (delta_t / (2 * hbar)) * H_f
B = I + 1j * (delta_t / (2 * hbar)) * H_f

# Time evolution loop
for t in range(T_max):
    for depth in range(3):  # Sum over first 3 recursion levels
        correction = fractal_correction(depth, (gridsize, gridsize, gridsize, gridsize))
        G_f += correction
    Psi = np.linalg.solve(A, B @ Psi)  # Evolve wavefunction

# Plot the curvature variations
plt.imshow(G_f[:, :, gridsize//2, gridsize//2], cmap='inferno')
plt.title("Fractal Gravity Tensor Evolution (Mid-Slice)")
plt.colorbar()
plt.show()

# Plot wavefunction evolution
plt.plot(np.abs(Psi)**2, label='Quantum Probability Density')
plt.title("Fractal Quantum Wavefunction Evolution")
plt.xlabel("Grid Index")
plt.ylabel("Probability Density")
plt.legend()
plt.show()
